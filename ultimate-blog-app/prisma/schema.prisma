// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // relationMode = "prisma"
}

model Post {
    id            Int     @id @default(autoincrement())
    title         String
    description   String
    slug          String  @unique
    featuredImage String?
    html          String  @db.Text
    text          String  @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User       @relation(fields: [createdById], references: [id])
    createdById String
    tags        Tag[]
    comments    Comment[]
    likes       Like[]
    bookmarks   Bookmark[]

    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    bookmarks     Bookmark[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tag {
    id          Int     @id @default(autoincrement())
    name        String  @unique
    description String?
    slug        String  @unique
    posts       Post[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    authorId  String
    text      String
    postId    Int
    author    User     @relation(fields: [authorId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([authorId])
    @@index([postId])
}

model Like {
    id        Int      @id @default(autoincrement())
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@unique([postId, userId])
    @@index([userId])
}

model Bookmark {
    id        Int      @id @default(autoincrement())
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@unique([postId, userId])
    @@index([userId])
}
